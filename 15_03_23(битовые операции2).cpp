// 15_03_23 (работа с файлами)
//
//побитовые операторы: <<, >>,  & , | , ` , ^ - нужны для эффективного управления памяти
//
// Пример сдвига 1:
// 2 в двоичной системе: 2 = 0010
// 2<<1 означает что сдвиг влево на 1 разряд и тогда получим 0100 = 4
// 2<<2 означает что сдвиг влево на 2 разряда и тогда получим 1000 = 8
// 8>>2 означает что сдвиг вправо на 2 разряда и тогда получим 0010 = 2
// 
// Пример сдвига 2:
// 12 в двоичной системе: 12 = 1100
// 12>>1 получим 0110 = 6
// 12>>2 получим 0011 = 3
// 12>>3 получим 0001 = 1
// 12>>4 получим 0000 = 0 (ячейка памяти пустая, информации нет, она свободна)
//
// ==================================================================================================
//// Смещение битов в переменных: << или >>
//
//#include <iostream>
//#include <time.h>
//
//using namespace std;
//
//
//int main()
//{
//	setlocale(LC_ALL, "Rus");
//	srand(time(NULL));
//
//	int x = 2;
//	x = x << 10;
//	cout << x;
//
//
//	return 0;
//}
//
//
//
// ==================================================================================================

//// Побитовое Не (инверсия): " ` " - меняет каждый бит на противоположный
//
//#include <iostream>
//#include <time.h>
//
//using namespace std;
//
//
//int main()
//{
//	setlocale(LC_ALL, "Rus");
//	srand(time(NULL));
//
//	int x = 2;
//	x = ~x;
//	cout << x;
//
//
//	return 0;
//}
// ==================================================================================================
//// Побитовое сравнение И и ИЛИ: "&" "|" - работают также как логические и (&&) и или (||)
//
// Побитовое ИЛИ: друг под дружкой сравниваются когда выполняется хотябы одно условие TRUE = (1)
// 5 в двоичной системе исчисления: 5 = 0101
// 6 в двоичной системе исчисления: 6 = 0110
//                                      ----
//           получается при сравнении   0111 = 7
// Побитовое ИЛИ: получается 7
//
//#include <iostream>
//#include <time.h>
//
//using namespace std;
//
//
//int main()
//{
//	setlocale(LC_ALL, "Rus");
//	srand(time(NULL));
//
//	int x = 5, y = 6;
//	
//	int res = x | y;
//
//	cout << res;
//
//	return 0;
//}
// ==================================================================================================
// Побитовое И: друг под дружкой сравниваются когда выполняются оба условия TRUE = (1)
// 5 в двоичной системе исчисления: 5 = 0101
// 6 в двоичной системе исчисления: 6 = 0110
//                                      ----
//           получается при сравнении   0100 = 4
// Побитовое И: получается 4
//
//#include <iostream>
//#include <time.h>
//
//using namespace std;
//
//
//int main()
//{
//	setlocale(LC_ALL, "Rus");
//	srand(time(NULL));
//
//	int x = 5, y = 6;
//	
//	int res = x & y; //если написать && то сравниевает два числа по значениям а не по битам
//
//	cout << res;
//
//	return 0;
//}
// ==================================================================================================
// Исключающее ИЛИ " ^ "
// возвращает TRUE если только один из операндов TRUE
// 
// 5 в двоичной системе исчисления: 5 = 0101
// 6 в двоичной системе исчисления: 6 = 0110
//                                      ----
//           получается при сравнении   0011 = 3 - исключение истинности
// Исключающее ИЛИ: получается 3
// 
// может пригодиться при проверке программы на FALSE (например отлов ошибок при записи базы данных)
// например при компиляции 0 - ошибок нет, если 1 - ошибка (Исключающее ИЛИ отловил ошибку)
//
#include <iostream>
#include <time.h>

using namespace std;


int main()
{
	setlocale(LC_ALL, "Rus");
	srand(time(NULL));

	int x = 5, y = 6;
	
	int res = x & y; //если написать && то сравниевает два числа по значениям а не по битам

	cout << res;

	return 0;
}
