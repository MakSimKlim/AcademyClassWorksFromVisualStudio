// 17_02_23_01 (перегрузка функции)
//
//раскрытие макросов
//inline
//перегрузка функции


// 1)  INLINE (позволяет уменьшать время выполнения)

//при работе с функцией уходит много времени у программы
//с INLINE позволяет вставлять фунцию в тело прогрммы, сокращая время выполнения программы, 
//кладет в предпроцессор (в оперативной памяти) этот текст и просто подставляет его не уходя все время наверх
//так уменьш затраты по времени программы
//ставится на усмотрение программиста
//используется например при написании программы управления выстрела танка, все рассчеты по баллистике
//будут выполняться быстрее
//или например программа управления самолетом при использовании автопилота
//когда много раз вызывается эта функция, то целесообразнее применять INLINE
//пока функция не вызвана, она лежит в куче, как только вызвана хоть один раз, она помещается в стэк
//без inline программа после выполнения уходит снова в кучу, 
//с Inline  указатель на нее хранится в стэке до конца выполнения программы
//Ещё вариант, если функция слишком большая или рекурсивная (которая вызывает сама себя), ее тоже нужно делать с Inline
//рекурсия - замыкание одной функции на другой (типо цикла), должна быть ограничена во избежание переполнения Стэка и глюку
//

//#include <iostream>
//#include <math.h>
//#include <time.h>
//
//using namespace std;

//inline float module(float x = 0, float y = 0)// =0 избегаем засорение памяти, 
////это крайне рекомендуется делать, чтобы не столкнуться с артефактами
//{
//    return sqrt(x * x + y * y);
//}
//int main()
//{
//    setlocale(LC_ALL, "Rus");
//    srand(time(NULL));
//
//    float result = module(3, 2);
//
//    cout << result;
//}




//   2)   Раскрытие макроса (типо Inline)
// 
//#define - ключевое слово макроса

//#include <iostream>
//using namespace std;
//
//#define SQR(X) X*X;
//
//int main()
//{
//    setlocale(LC_ALL, "Rus");
//    srand(time(NULL));
//
//    float result = module(3, 2);
//
//    int X = 5;
//
//    int res = SQR(X);
//
//    cout << res;
//
//}

//  3) Перегрузка функции - мех-м позв делать функц с одинак именем 
// 
//и с разными типами данных и разными параметрами
//используется когда действия функции одинаковые, а типы данных разные
//#include <iostream>
//#include <cmath>
//using namespace std;
//int abc(int x)
//{
//    cout << "function1" << "\n";
//    return x > 0 ? x : -x;
//}
//double abc(double x)
//{
//    cout << "function2" << "\n";
//    return x > 0 ? x : -x ;
//}
//double abc(double x, double y)
//{
//    cout << "function3" << "\n";
//    return sqrt(x * x + y * y);
//}
//int main()
//{
//    setlocale(LC_ALL, "Rus");
//    srand(time(NULL));
//
//    cout << abc(-3)<<"\n";
//    cout << abc(2.5) << "\n";
//    cout << abc(3, 2) << "\n";
//}

//  4) Рекурсия - это способ вызова функции, при котор функция вызывает сама себя 
//из предыдущего вызова
#include <iostream>
#include <cmath>

using namespace std;

int Sum(int i, int A[], int n)//нач знач, массив, размер знач
{
    if (i == n - 1)// п-1  это последний элемент
        return A[i];
    else
        return A[i] + Sum(i + 1, A, n);
}

int main()
{
    setlocale(LC_ALL, "Rus");
    srand(time(NULL));

    int A[] = { 5, 7, 2, -1 };
    int n = 4;
    int sum;
    sum = Sum(0, A, n);
    cout << sum;
}
